import streamlit as st
import pandas as pd
from pathlib import Path

# Build correct path
DATA_PATH = Path(__file__).resolve().parents[1] / "data" / "processed" / "dailyclimate_cleaned.csv"

# Check if file exists
if not DATA_PATH.exists():
    st.error(f"File not found: {DATA_PATH}")
    st.stop()

# Load data
df = pd.read_csv(DATA_PATH)

# Clean column names
df.columns = df.columns.str.strip()


# Streamlit page content
st.title("Climate Vulnerability Analysis")
st.write("This page shows the vulnerability analysis based on various climate factors.")

high_temp_threshold = df['temp_2m'].quantile(0.95)
high_precip_threshold = df['precip'].quantile(0.95)

high_temp_areas = df[df['temp_2m'] > high_temp_threshold]
high_precip_areas = df[df['precip'] > high_precip_threshold]

st.subheader("Regions Vulnerable to High Temperature")
st.write(high_temp_areas[['date', 'district', 'temp_2m']])

st.subheader("Regions Vulnerable to High Precipitation")
st.write(high_precip_areas[['date', 'district', 'precip']])

st.line_chart(df.groupby('date')['temp_2m'].mean(), use_container_width=True)
st.line_chart(df.groupby('date')['precip'].mean(), use_container_width=True)



import streamlit as st
import pandas as pd
from pathlib import Path
import folium
from geopy.geocoders import Nominatim
from streamlit_folium import folium_static  # Correct import

# Build correct path
DATA_PATH = Path(__file__).resolve().parents[1] / "data" / "processed" / "dailyclimate_cleaned.csv"

# Check if file exists
if not DATA_PATH.exists():
    st.error(f"File not found: {DATA_PATH}")
    st.stop()

# Load data
df = pd.read_csv(DATA_PATH)

# Clean column names
df.columns = df.columns.str.strip()

# Streamlit page content
st.title("Climate Vulnerability Analysis")
st.write("This page shows the vulnerability analysis based on various climate factors.")

high_temp_threshold = df['temp_2m'].quantile(0.95)
high_precip_threshold = df['precip'].quantile(0.95)

high_temp_areas = df[df['temp_2m'] > high_temp_threshold]
high_precip_areas = df[df['precip'] > high_precip_threshold]

st.subheader("Regions Vulnerable to High Temperature")
st.write(high_temp_areas[['date', 'district', 'temp_2m']])

st.subheader("Regions Vulnerable to High Precipitation")
st.write(high_precip_areas[['date', 'district', 'precip']])

st.line_chart(df.groupby('date')['temp_2m'].mean(), use_container_width=True)
st.line_chart(df.groupby('date')['precip'].mean(), use_container_width=True)

# Initialize map centered on Nepal
nepal_map = folium.Map(location=[28.3949, 84.1240], zoom_start=7)  # Center of Nepal

# Plotting red dots for high temperature areas
for _, row in high_temp_areas.iterrows():
    geolocator = Nominatim(user_agent="climate_vulnerability_map")
    location = geolocator.geocode(row['district'] + ', Nepal')
    if location:
        folium.CircleMarker(
            location=[location.latitude, location.longitude],
            radius=6,
            color="red",
            fill=True,
            fill_color="red",
            fill_opacity=0.6
        ).add_to(nepal_map)

# Plotting red dots for high precipitation areas
for _, row in high_precip_areas.iterrows():
    geolocator = Nominatim(user_agent="climate_vulnerability_map")
    location = geolocator.geocode(row['district'] + ', Nepal')
    if location:
        folium.CircleMarker(
            location=[location.latitude, location.longitude],
            radius=6,
            color="blue",
            fill=True,
            fill_color="blue",
            fill_opacity=0.6
        ).add_to(nepal_map)

# Display map in Streamlit
st.subheader("Climate Vulnerability Map")
st.write("This map shows regions vulnerable to high temperature and high precipitation.")
st.markdown("""
**Legend**  
ðŸ”´ High Temperature  
ðŸ”µ High Precipitation
""")
st.write("This map shows regions vulnerable to high temperature and high precipitation.")
folium_static(nepal_map)



